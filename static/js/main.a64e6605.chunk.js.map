{"version":3,"sources":["App.js","index.js"],"names":["App","useState","botData","setBotData","posData","setPosData","closedData","setClosedData","showBot","setShowBot","showCurPos","setShowCurPos","showClosed","setShowClosed","bots","process","positions","closed","useEffect","fetch","then","response","json","data","dollarUS","Intl","NumberFormat","style","currency","categories","seriesDataPL","seriesDataTarget","Navbar","bg","sticky","Container","fluid","Brand","className","src","alt","width","Button","href","Row","closedValuesPL","Object","entries","reduce","dv","d","closeDate","v","pnl","moment","format","map","sort","a","b","Date","closedValuesTarget","quantity","Array","from","acc","currentValue","currentIndex","chartData","options","chart","id","type","foreColor","toolbar","show","zoom","enabled","autoScaleYaxis","tooltip","xaxis","dataLabels","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","series","name","color","height","buildChart","Col","sm","Table","size","colSpan","winLossCount","wins","losses","winPercent","Math","round","length","lossPercent","expectancy","filter","t","risk","values","draw","riskReward","cost","ror","metrics","ButtonGroup","variant","onClick","responsive","bot","i","pcount","seed","roi","allocation","pl","plPerc","dataBotFoot","days","pos","symbol","strategy","text","expiration","currentPositionCount","dataPosFoot","valueOf","openDate","closedPositionCount","target","dataClosedFoot","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a64e6605.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Navbar,\r\n  Container,\r\n  Table,\r\n  Col,\r\n  Row,\r\n  Button,\r\n  ButtonGroup\r\n} from 'react-bootstrap';\r\nimport './App.css';\r\nimport moment from 'moment';\r\nimport Chart from 'react-apexcharts';\r\n\r\nfunction App() {\r\n\r\n  const [botData, setBotData] = useState()\r\n  const [posData, setPosData] = useState()\r\n  const [closedData, setClosedData] = useState()\r\n\r\n  const [showBot, setShowBot] = useState(true)\r\n  const [showCurPos, setShowCurPos] = useState(false)\r\n  const [showClosed, setShowClosed] = useState(false)\r\n\r\n  const toggleShowBot = () => {\r\n    setShowBot(!showBot)\r\n    setShowCurPos(false)\r\n    setShowClosed(false)\r\n  }\r\n  const toggleShowCurPos = () => {\r\n    setShowCurPos(!showCurPos)\r\n    setShowBot(false)\r\n    setShowClosed(false)\r\n  }\r\n  const toggleShowClosed = () => {\r\n    setShowClosed(!showClosed)\r\n    setShowCurPos(false)\r\n    setShowBot(false)\r\n  };\r\n\r\n  const bots = process.env.PUBLIC_URL + '/botdata/bots.json'\r\n  const positions = process.env.PUBLIC_URL + '/botdata/positions.json'\r\n  const closed = process.env.PUBLIC_URL + '/botdata/closed.json'\r\n\r\n  useEffect(() => {\r\n    fetch(bots)\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        setBotData(data)\r\n      ).then(\r\n        fetch(positions)\r\n          .then((response) => response.json())\r\n          .then((data) =>\r\n            setPosData(data)\r\n          )\r\n      ).then(\r\n        fetch(closed)\r\n          .then((response) => response.json())\r\n          .then((data) =>\r\n            setClosedData(data)\r\n          )\r\n      )\r\n  }, [bots, closed, positions])\r\n\r\n  const dollarUS = Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  });\r\n\r\n  let categories = []\r\n  let seriesDataPL = []\r\n  let seriesDataTarget = []\r\n\r\n  const buildChart = () => {\r\n\r\n    const closedValuesPL = Object.entries((closedData || []).reduce((dv, { closeDate: d, pnl: v }) => ({ ...dv, [moment(d).format('MMM DD YYYY')]: (dv[moment(d).format('MMM DD YYYY')] || 0) + v }), {})).map(([closeDate, pnl]) => ({ closeDate, pnl })).sort((a, b) => { const dateA = new Date(a.closeDate); const dateB = new Date(b.closeDate); return dateA - dateB })\r\n    const closedValuesTarget = Object.entries((closedData || []).reduce((dv, { closeDate: d, quantity: v }) => ({ ...dv, [moment(d).format('MMM DD YYYY')]: (dv[moment(d).format('MMM DD YYYY')] || 0) + (v / v) }), {})).map(([closeDate, quantity]) => ({ closeDate, quantity })).sort((a, b) => { const dateA = new Date(a.closeDate); const dateB = new Date(b.closeDate); return dateA - dateB })\r\n    categories = Array.from(closedValuesPL.map(({ closeDate }) => closeDate)).sort((a, b) => { const dateA = new Date(a.closeDate); const dateB = new Date(b.closeDate); return dateA - dateB })\r\n\r\n    seriesDataPL = Array.from(closedValuesPL.map(({ pnl }) => pnl)).reduce((acc, currentValue, currentIndex) => {\r\n      if (currentIndex === 0) {\r\n        return [currentValue];\r\n      }\r\n      return [...acc, currentValue + acc[currentIndex - 1]];\r\n    }, [])\r\n\r\n    seriesDataTarget = Array.from(closedValuesTarget.map(({ quantity }) => quantity * 25)).reduce((acc, currentValue, currentIndex) => {\r\n      if (currentIndex === 0) {\r\n        return [currentValue];\r\n      }\r\n      return [...acc, currentValue + acc[currentIndex - 1]];\r\n    }, [])\r\n\r\n    const chartData = {\r\n      options: {\r\n        chart: {\r\n          id: 'area',\r\n          type: 'area',\r\n          foreColor: '#fff',\r\n          toolbar: {\r\n            show: false,\r\n          },\r\n          zoom: {\r\n            enabled: false,\r\n            autoScaleYaxis: true\r\n          }\r\n        },\r\n        tooltip: {\r\n          enabled: true\r\n        },\r\n        xaxis: {\r\n          categories: categories,\r\n          tooltip: {\r\n            enabled: false\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        }\r\n      },\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n          shadeIntensity: 1,\r\n          opacityFrom: 0.7,\r\n          opacityTo: 0.5,\r\n          stops: [0, 50, 100]\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Projected P/L\",\r\n          data: seriesDataTarget,\r\n          color: '#1589FF',\r\n        },\r\n        {\r\n          name: \"Actual P/L\",\r\n          data: seriesDataPL,\r\n          color: '#16F529'\r\n        }\r\n      ]\r\n    }\r\n    return (\r\n      <div className=\"pl-chart mb-3 text-white\">\r\n        Ελπις (Elpis): Expectancy Strategy\r\n        <Chart\r\n          options={chartData.options}\r\n          series={chartData.series}\r\n          type=\"area\"\r\n          width=\"100%\"\r\n          height=\"175%\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const dataBotBody = () => (botData || []).sort((a, b) =>\r\n  b.pnl - a.pnl).map((bot, i) => {\r\n    return (\r\n      <tr key={i}>\r\n        <td className='align-middle gold'>{bot.name}</td>\r\n        <td className='align-middle text-center'>{bot.pcount}</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(bot.seed)}</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(bot.draw)}</td>\r\n        <td className={`align-middle text-center ${bot.pnl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(bot.pnl)}<br></br>{Math.round(bot.roi * 100)}%</td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n  const dataBotFoot = () => {\r\n    const positions = Object.values(botData || []).reduce((t, { pcount }) => t + pcount, 0)\r\n    const allocation = Object.values(botData || []).reduce((t, { seed }) => t + seed, 0)\r\n    const risk = Object.values(botData || []).reduce((t, { draw }) => t + draw, 0)\r\n    const pl = Object.values(botData || []).reduce((t, { pnl }) => t + pnl, 0)\r\n    const plPerc = Math.round((100 * pl / allocation))\r\n    return (\r\n      <tr>\r\n        <td className='align-middle'>TOTALS</td>\r\n        <td className='align-middle text-center'>{positions}</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(allocation)}</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(risk)}</td>\r\n        <td className={`align-middle text-center ${pl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(pl)}\r\n          <br></br>{plPerc}%\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n\r\n  const dataPosBody = () => (posData || []).sort((a, b) =>\r\n    a.days - b.days).map((pos, i) => {\r\n      return (\r\n        <tr key={i}>\r\n          <td className=\"gold\">\r\n            <div className=\"text-white\">{pos.symbol} | {pos.strategy}</div>\r\n            <div>{pos.text}</div>\r\n            <div className=\"grey\">{moment(pos.expiration).format('MMM D')} </div>\r\n          </td>\r\n          <td className='align-middle text-center'>{pos.days}</td>\r\n          <td className='align-middle text-center'>{pos.quantity}</td>\r\n          <td className='align-middle text-center'>{dollarUS.format(pos.draw)}</td>\r\n          <td className={`align-middle text-center ${pos.pnl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(pos.pnl)}</td>\r\n          <td className={`align-middle text-center ${pos.ror < 0 ? \"red\" : \"green\"}`}>{Math.round(pos.ror * 100)}%</td>\r\n        </tr>\r\n      )\r\n    })\r\n\r\n  const dataPosFoot = () => {\r\n    const currentPositionCount = (posData || []).length\r\n    const risk = Object.values(posData || []).reduce((t, { draw }) => t + draw, 0)\r\n    const pl = Object.values(posData || []).reduce((t, { pnl }) => t + pnl, 0)\r\n    const plPerc = Math.round((100 * pl / risk))\r\n    return (\r\n      <tr>\r\n        <td className='align-middle' colSpan='3'>TOTALS: {currentPositionCount} Current Positions</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(risk)}</td>\r\n        <td className={`align-middle text-center ${pl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(pl)}</td>\r\n        <td className={`align-middle text-center ${plPerc < 0 ? \"red\" : \"green\"}`}>{plPerc}%</td>\r\n      </tr>\r\n    )\r\n  }\r\n\r\n  const dataClosedBody = () => (closedData || []).sort((a, b) =>\r\n    moment(b.closeDate).valueOf() - moment(a.closeDate)).map((pos, i) => {\r\n      return (\r\n        <tr key={i}>\r\n          <td className=\"gold\">\r\n            <div className=\"text-white\">{pos.symbol} | {pos.type}</div>\r\n            <div>{pos.text}</div>\r\n            <div className=\"grey\">Quantity: {pos.quantity}</div>\r\n          </td>\r\n          <td className='align-middle text-center'>{moment(pos.openDate).format('MMM D HH:mm')}</td>\r\n          <td className='align-middle text-center'>{moment(pos.closeDate).format('MMM D HH:mm')}</td>\r\n          <td className='align-middle text-center'>{dollarUS.format(pos.draw)}</td>\r\n          <td className='align-middle text-center'>{dollarUS.format(\"25\")}</td>\r\n          <td className={`align-middle text-center ${pos.pnl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(pos.pnl)}</td>\r\n        </tr>\r\n      )\r\n    })\r\n\r\n  const dataClosedFoot = () => {\r\n    const closedPositionCount = (closedData || []).length\r\n    const risk = Object.values(closedData || []).reduce((t, { draw }) => t + draw, 0)\r\n    const target = (Object.values(closedData || []).reduce((t, { quantity }) => t + (quantity / quantity) * 25, 0))\r\n    const pnl = dollarUS.format(Math.round((Object.values(closedData || []).reduce((t, { pnl }) => t + pnl, 0))))\r\n    return (\r\n      <tr>\r\n        <td className='align-middle' colSpan='3'>TOTALS: {closedPositionCount} Closed Positions</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(risk)}</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(target)}</td>\r\n        <td className={`align-middle text-center ${pnl < 0 ? \"red\" : \"green\"}`}>{pnl}</td>\r\n      </tr>\r\n    )\r\n  }\r\n\r\n  const metrics = () => {\r\n    const winLossCount = (closedData || []).reduce((acc, { pnl }) => {\r\n      if (pnl > 0) {\r\n        acc.wins++;\r\n      } else if (pnl < 0) {\r\n        acc.losses++;\r\n      }\r\n      return acc;\r\n    }, { wins: 0, losses: 0 });\r\n    const winPercent = Math.round(winLossCount.wins / (closedData || []).length * 100) / 100\r\n    const lossPercent = Math.round(winLossCount.losses / (closedData || []).length * 100) / 100\r\n    const avgWin = (closedData || []).filter(({ pnl }) => pnl > 0).reduce((t, { pnl }) => t + pnl, 0) / (closedData || []).filter(({ pnl }) => pnl > 0).length\r\n    const avgLoss = (closedData || []).filter(({ pnl }) => pnl < 0).reduce((t, { pnl }) => t + pnl, 0) * -1 / (closedData || []).filter(({ pnl }) => pnl < 0).length\r\n    const expectancy = (winPercent * avgWin) - (lossPercent * avgLoss)\r\n    const risk = Object.values(closedData || []).reduce((t, { draw }) => t + draw, 0)\r\n    const target = (Object.values(closedData || []).reduce((t, { cost }) => t + cost, 0)) * -1\r\n    const pnl = Math.round((Object.values(closedData || []).reduce((t, { pnl }) => t + pnl, 0)))\r\n    const riskReward = target / risk\r\n    const ror = pnl / risk\r\n    return (\r\n      <tbody>\r\n        <tr>\r\n          <td className='align-middle'>Win Percentage</td>\r\n          <td className='align-middle'>{Math.round(winPercent * 100)}%</td>\r\n        </tr>\r\n        <tr>\r\n          <td className='align-middle'>Loss Percentage</td>\r\n          <td className='align-middle'>{Math.round(lossPercent * 100)}%</td>\r\n        </tr>\r\n        <tr>\r\n          <td className='align-middle'>Risk-to-Reward Ratio</td>\r\n          <td className='align-middle'>{Math.round(riskReward * 100)}%</td>\r\n        </tr>\r\n        <tr>\r\n          <td className='align-middle'>Return on Risk</td>\r\n          <td className='align-middle'>{Math.round(ror * 100)}%</td>\r\n        </tr>\r\n        <tr>\r\n          <td className='align-middle'>Expectancy Per Trade</td>\r\n          <td className='align-middle'>{dollarUS.format(expectancy)}</td>\r\n        </tr>\r\n      </tbody>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Navbar bg=\"dark\" sticky=\"top\">\r\n        <Container fluid>\r\n          <Navbar.Brand className=\"text-light p-0\"><span><img src={process.env.PUBLIC_URL + \"/OptionsAnalyzerS.png\"} alt=\"logo - target with arrow\" className=\"mt-1 mb-2\" style={{ width: \"2.25em\" }} />&nbsp;<Button className=\"b-color mt-2 mb-2 p-2 text-center\" href=\"https://optionalpha.com/\">Data Sourced from Option Alpha</Button></span></Navbar.Brand>\r\n        </Container>\r\n      </Navbar>\r\n\r\n      <Container fluid>\r\n        <Row className=\"overflow-hidden\">\r\n\r\n          {buildChart()}\r\n\r\n          <Col sm={2}>\r\n            <Table size=\"sm\" className=\"text-light border border-secondary mt-3\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"text-center\" colSpan='2'>METRICS</th>\r\n                </tr>\r\n              </thead>\r\n              {metrics()}\r\n            </Table>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Row className=\"mx-auto mt-3\">\r\n              <ButtonGroup>\r\n                <Button variant=\"outline-secondary\" size=\"small\" className=\"mb-2\" onClick={toggleShowBot}>Bot Details</Button>\r\n                <Button variant=\"outline-secondary\" size=\"small\" className=\"mb-2\" onClick={toggleShowCurPos}>Current Positions</Button>\r\n                <Button variant=\"outline-secondary\" size=\"small\" className=\"mb-2\" onClick={toggleShowClosed}>Closed Positions</Button>\r\n              </ButtonGroup>\r\n            </Row>\r\n\r\n            <Row className=\"mx-auto mt-3 mb-2 p-1\">\r\n              {showBot ? (\r\n                <Table responsive size=\"sm\" className=\"sticky text-light border border-secondary\">\r\n                  <thead>\r\n                    <tr>\r\n                    <th className=\"text-left header align-middle\">BOT</th>\r\n                    <th className=\"text-center align-middle\">POSITIONS</th>\r\n                    <th className=\"text-center align-middle\">ALLOCATION</th>\r\n                    <th className=\"text-center align-middle\">CAP AT RISK</th>\r\n                    <th className=\"text-center align-middle\">P/L</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {dataBotBody()}\r\n                  </tbody>\r\n                  <tfoot>\r\n                    {dataBotFoot()}\r\n                  </tfoot>\r\n                </Table>\r\n              ) : null}\r\n\r\n              {showCurPos ? (\r\n                <Table responsive size=\"sm\" className=\"sticky text-light border border-secondary\">\r\n                  <thead>\r\n                    <tr>\r\n                    <th className=\"text-left align-middle\">CURRENT POSITIONS</th>\r\n                    <th className=\"text-center align-middle\">DAYS</th>\r\n                    <th className=\"text-center align-middle\">QTY</th>\r\n                    <th className=\"text-center align-middle\">CAP AT RISK</th>\r\n                    <th className=\"text-center align-middle\">P/L</th>\r\n                    <th className=\"text-center align-middle\">RETURN ON RISK</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {dataPosBody()}\r\n                  </tbody>\r\n                  <tfoot>\r\n                    {dataPosFoot()}\r\n                  </tfoot>\r\n                </Table>\r\n              ) : null}\r\n\r\n              {showClosed ? (\r\n                <Table responsive size=\"sm\" className=\"sticky text-light border border-secondary\">\r\n                  <thead>\r\n                    <tr>\r\n                    <th className=\"text-left align-middle\">CLOSED POSITIONS</th>\r\n                    <th className=\"text-center align-middle\">OPEN DATE</th>\r\n                    <th className=\"text-center align-middle\">CLOSED DATE</th>\r\n                    <th className=\"text-center align-middle\">CAP RISKED</th>\r\n                    <th className=\"text-center align-middle\">TARGET P/L</th>\r\n                    <th className=\"text-center align-middle\">P/L</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {dataClosedBody()}\r\n                  </tbody>\r\n                  <tfoot>\r\n                    {dataClosedFoot()}\r\n                  </tfoot>\r\n                </Table>\r\n              ) : null}\r\n\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}