{"version":3,"sources":["App.js","index.js"],"names":["App","useState","botData","setBotData","posData","setPosData","closedData","setClosedData","showBot","setShowBot","showCurPos","setShowCurPos","showClosed","setShowClosed","selectedStrat","setSelectedStrat","bots","process","positions","closed","useEffect","fetch","then","response","json","data","filter","pos","status","dollarUS","Intl","NumberFormat","style","currency","categories","seriesDataPL","seriesDataTarget","ept","Navbar","bg","sticky","Container","fluid","Brand","className","display","alignItems","src","alt","width","Button","href","Dropdown","Toggle","variant","id","Menu","map","strat","Item","onClick","Row","closedValuesPL","Object","entries","reduce","dv","d","closeDate","v","pnl","moment","format","sort","a","b","Date","closedValuesTarget","quantity","Array","from","acc","currentValue","currentIndex","chartData","options","annotations","xaxis","x","strokeDashArray","borderColor","label","orientation","color","background","text","chart","type","foreColor","toolbar","show","zoom","enabled","autoScaleYaxis","tooltip","dataLabels","fill","gradient","shadeIntensity","opacityFrom","opacityTo","stops","series","name","height","buildChart","Col","sm","Table","size","colSpan","winLossCount","wins","losses","winPercent","Math","round","length","lossPercent","expectancy","t","risk","values","draw","calmarRatio","max","toFixed","ror","metrics","ButtonGroup","responsive","bot","i","pcount","seed","roi","allocation","pl","plPerc","dataBotFoot","isNaN","days","symbol","strategy","expiration","currentPositionCount","dataPosFoot","valueOf","openDate","closedPositionCount","dataClosedFoot","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.ab803553.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Navbar,\r\n  Container,\r\n  Table,\r\n  Col,\r\n  Row,\r\n  Button,\r\n  ButtonGroup,\r\n  Dropdown\r\n} from 'react-bootstrap';\r\nimport './App.css';\r\nimport moment from 'moment';\r\nimport Chart from 'react-apexcharts';\r\n\r\nfunction App() {\r\n\r\n  const [botData, setBotData] = useState()\r\n  const [posData, setPosData] = useState()\r\n  const [closedData, setClosedData] = useState()\r\n\r\n  const [showBot, setShowBot] = useState(true)\r\n  const [showCurPos, setShowCurPos] = useState(false)\r\n  const [showClosed, setShowClosed] = useState(false)\r\n\r\n  const [selectedStrat, setSelectedStrat] = useState('Ελπις (Elpis)');\r\n  const stratNames = ['Ελπις (Elpis)', 'Κασσάνδρα (Cassandra)'];\r\n\r\n  const toggleShowBot = () => {\r\n    setShowBot(!showBot)\r\n    setShowCurPos(false)\r\n    setShowClosed(false)\r\n  }\r\n  const toggleShowCurPos = () => {\r\n    setShowCurPos(!showCurPos)\r\n    setShowBot(false)\r\n    setShowClosed(false)\r\n  }\r\n  const toggleShowClosed = () => {\r\n    setShowClosed(!showClosed)\r\n    setShowCurPos(false)\r\n    setShowBot(false)\r\n  };\r\n\r\n  const bots = process.env.PUBLIC_URL + '/botdata/'+ selectedStrat + ' Total.json'\r\n  const positions = process.env.PUBLIC_URL + '/botdata/'+ selectedStrat + ' Open.json'\r\n  const closed = process.env.PUBLIC_URL + '/botdata/'+ selectedStrat + ' Closed.json'\r\n\r\n  useEffect(() => {\r\n    fetch(bots)\r\n      .then((response) => response.json())\r\n      .then((data) =>\r\n        setBotData(data)\r\n      ).then(\r\n        fetch(positions)\r\n          .then((response) => response.json())\r\n          .then((data) =>\r\n            setPosData(data)\r\n          )\r\n      ).then(\r\n        fetch(closed)\r\n          .then((response) => response.json())\r\n          .then((data) =>\r\n            setClosedData(data.filter((pos) => pos.status !== \"canceled\"))\r\n          )\r\n      )\r\n  }, [bots, closed, positions, selectedStrat])\r\n\r\n  const dollarUS = Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  });\r\n\r\n  let categories = []\r\n  let seriesDataPL = []\r\n  let seriesDataTarget = []\r\n  let ept = selectedStrat === \"Κασσάνδρα (Cassandra)\" ? 50 : 25\r\n\r\n  const buildChart = () => {\r\n\r\n    const closedValuesPL = Object.entries((closedData || []).reduce((dv, { closeDate: d, pnl: v }) => ({ ...dv, [moment(d).format('MMM DD YYYY')]: (dv[moment(d).format('MMM DD YYYY')] || 0) + v }), {})).map(([closeDate, pnl]) => ({ closeDate, pnl })).sort((a, b) => { const dateA = new Date(a.closeDate); const dateB = new Date(b.closeDate); return dateA - dateB })\r\n    const closedValuesTarget = Object.entries((closedData || []).reduce((dv, { closeDate: d, quantity: v }) => ({ ...dv, [moment(d).format('MMM DD YYYY')]: (dv[moment(d).format('MMM DD YYYY')] || 0) + (v / v) }), {})).map(([closeDate, quantity]) => ({ closeDate, quantity })).sort((a, b) => { const dateA = new Date(a.closeDate); const dateB = new Date(b.closeDate); return dateA - dateB })\r\n    categories = Array.from(closedValuesPL.map(({ closeDate }) => closeDate)).sort((a, b) => { const dateA = new Date(a.closeDate); const dateB = new Date(b.closeDate); return dateA - dateB })\r\n\r\n    seriesDataPL = Array.from(closedValuesPL.map(({ pnl }) => pnl)).reduce((acc, currentValue, currentIndex) => {\r\n      if (currentIndex === 0) {\r\n        return [currentValue];\r\n      }\r\n      return [...acc, currentValue + acc[currentIndex - 1]];\r\n    }, [])\r\n\r\n    seriesDataTarget = Array.from(closedValuesTarget.map(({ quantity }) => quantity * ept)).reduce((acc, currentValue, currentIndex) => {\r\n      if (currentIndex === 0) {\r\n        return [currentValue];\r\n      }\r\n      return [...acc, currentValue + acc[currentIndex - 1]];\r\n    }, [])\r\n\r\n    const chartData = {\r\n      options: {\r\n        annotations: {\r\n          xaxis: [\r\n            {\r\n              x: \"Jan 24 2023\",\r\n              strokeDashArray: 1,\r\n              borderColor: \"#FF10F0\",\r\n              label: {\r\n                orientation: 'horizontal',\r\n                borderColor: \"#FF10F0\",\r\n                style: {\r\n                  color: \"#fff\",\r\n                  background: \"#FF10F0\"\r\n                },\r\n                text: [\"FIXED ROR ERROR\", \"START NEW POSITION STRATEGY\"]\r\n              }\r\n            }\r\n          ]\r\n        },\r\n        chart: {\r\n          id: 'area',\r\n          type: 'area',\r\n          foreColor: '#fff',\r\n          toolbar: {\r\n            show: false,\r\n          },\r\n          zoom: {\r\n            enabled: false,\r\n            autoScaleYaxis: true\r\n          }\r\n        },\r\n        tooltip: {\r\n          enabled: true\r\n        },\r\n        xaxis:\r\n        {\r\n          categories: categories,\r\n          tooltip: {\r\n            enabled: false\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        }\r\n      },\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n          shadeIntensity: 1,\r\n          opacityFrom: 0.7,\r\n          opacityTo: 0.5,\r\n          stops: [0, 50, 100]\r\n        }\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Projected P/L\",\r\n          data: seriesDataTarget,\r\n          color: '#1589FF',\r\n        },\r\n        {\r\n          name: \"Actual P/L\",\r\n          data: seriesDataPL,\r\n          color: '#16F529'\r\n        }\r\n      ],\r\n    }\r\n    return (\r\n      <div className=\"pl-chart mb-3 text-white\">\r\n        {selectedStrat}\r\n        <Chart\r\n          options={chartData.options}\r\n          series={chartData.series}\r\n          type=\"area\"\r\n          width=\"100%\"\r\n          height=\"175%\"\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const dataBotBody = () => (botData || []).sort((a, b) =>\r\n    b.pnl - a.pnl).map((bot, i) => {\r\n      return (\r\n        <tr key={i}>\r\n          <td className='align-middle gold'>{bot.name}</td>\r\n          <td className='align-middle text-center'>{bot.pcount}</td>\r\n          <td className='align-middle text-center'>{dollarUS.format(bot.seed)}</td>\r\n          <td className='align-middle text-center'>{dollarUS.format(bot.draw)}</td>\r\n          <td className={`align-middle text-center ${bot.pnl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(bot.pnl)}<br></br>{Math.round(bot.roi * 100)}%</td>\r\n        </tr>\r\n      )\r\n    })\r\n\r\n  const dataBotFoot = () => {\r\n    const positions = Object.values(botData || []).reduce((t, { pcount }) => t + pcount, 0)\r\n    const allocation = Object.values(botData || []).reduce((t, { seed }) => t + seed, 0)\r\n    const risk = Object.values(botData || []).reduce((t, { draw }) => t + draw, 0)\r\n    const pl = Object.values(botData || []).reduce((t, { pnl }) => t + pnl, 0)\r\n    const plPerc = Math.round((100 * pl / allocation))\r\n    return (\r\n      <tr>\r\n        <td className='align-middle'>TOTALS</td>\r\n        <td className='align-middle text-center'>{positions}</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(allocation)}</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(risk)}</td>\r\n        <td className={`align-middle text-center ${pl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(pl)}\r\n          <br></br>{plPerc}%\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n\r\n  const dataPosBody = () => (posData || [])\r\n  .filter(pos => !isNaN(pos.days) && pos.days !== '')\r\n  .sort((a, b) => a.days - b.days)\r\n  .map((pos, i) => {\r\n    return (\r\n      <tr key={i}>\r\n        <td className=\"gold\">\r\n          <div className=\"text-white\">{pos.symbol} | {pos.strategy}</div>\r\n          <div>{pos.text}</div>\r\n          <div className=\"grey\">{moment(pos.expiration).format('MMM D')} </div>\r\n        </td>\r\n        <td className='align-middle text-center'>{pos.days}</td>\r\n        <td className='align-middle text-center'>{pos.quantity}</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(pos.draw)}</td>\r\n        <td className={`align-middle text-center ${pos.pnl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(pos.pnl)}</td>\r\n        <td className={`align-middle text-center ${pos.ror < 0 ? \"red\" : \"green\"}`}>{Math.round(pos.ror * 100)}%</td>\r\n      </tr>\r\n    )\r\n  })\r\n\r\n\r\n  const dataPosFoot = () => {\r\n    const currentPositionCount = (posData || []).length\r\n    const risk = Object.values(posData || []).reduce((t, { draw }) => t + (isNaN(draw) ? 0 : draw), 0)\r\n    const pl = Object.values(posData || []).reduce((t, { pnl }) => t + (isNaN(pnl) ? 0 : pnl), 0)\r\n    const plPerc = isNaN(pl) || isNaN(risk) ? 0 : isNaN(Math.round(100 * pl / risk)) ? 0 : Math.round(100 * pl / risk)\r\n    return (\r\n      <tr>\r\n        <td className='align-middle' colSpan='3'>TOTALS: {currentPositionCount} Current Positions</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(risk)}</td>\r\n        <td className={`align-middle text-center ${pl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(pl)}</td>\r\n        <td className={`align-middle text-center ${plPerc < 0 ? \"red\" : \"green\"}`}>{plPerc}%</td>\r\n      </tr>\r\n    )\r\n  }\r\n  \r\n  const dataClosedBody = () => (closedData || []).sort((a, b) =>\r\n    moment(b.closeDate).valueOf() - moment(a.closeDate)).map((pos, i) => {\r\n      return (\r\n        <tr key={i}>\r\n          <td className=\"gold\">\r\n            <div className=\"text-white\">{pos.symbol} | {pos.type}</div>\r\n            <div>{pos.text}</div>\r\n            <div className=\"grey\">Quantity: {pos.quantity}</div>\r\n          </td>\r\n          <td className='align-middle text-center'>{moment(pos.openDate).format('MMM D HH:mm')}</td>\r\n          <td className='align-middle text-center'>{moment(pos.closeDate).format('MMM D HH:mm')}</td>\r\n          <td className='align-middle text-center'>{dollarUS.format(pos.draw)}</td>\r\n          <td className={`align-middle text-center ${pos.pnl < 0 ? \"red\" : \"green\"}`}>{dollarUS.format(pos.pnl)}</td>\r\n        </tr>\r\n      )\r\n    })\r\n\r\n  const dataClosedFoot = () => {\r\n    const closedPositionCount = (closedData || []).length\r\n    const risk = Object.values(closedData || []).reduce((t, { draw }) => t + draw, 0)\r\n    const pnl = dollarUS.format(Math.round((Object.values(closedData || []).reduce((t, { pnl }) => t + pnl, 0))))\r\n    return (\r\n      <tr>\r\n        <td className='align-middle' colSpan='3'>TOTALS: {closedPositionCount} Closed Positions</td>\r\n        <td className='align-middle text-center'>{dollarUS.format(risk)}</td>\r\n        <td className={`align-middle text-center ${pnl < 0 ? \"red\" : \"green\"}`}>{pnl}</td>\r\n      </tr>\r\n    )\r\n  }\r\n\r\n  const metrics = () => {\r\n    const winLossCount = (closedData || []).reduce((acc, { pnl }) => {\r\n      if (pnl > 0) {\r\n        acc.wins++;\r\n      } else if (pnl < 0) {\r\n        acc.losses++;\r\n      }\r\n      return acc;\r\n    }, { wins: 0, losses: 0 });\r\n    const winPercent = Math.round(winLossCount.wins / (closedData || []).length * 100) / 100\r\n    const lossPercent = Math.round(winLossCount.losses / (closedData || []).length * 100) / 100\r\n    const avgWin = (closedData || []).filter(({ pnl }) => pnl > 0).reduce((t, { pnl }) => t + pnl, 0) / (closedData || []).filter(({ pnl }) => pnl > 0).length\r\n    const avgLoss = (closedData || []).filter(({ pnl }) => pnl < 0).reduce((t, { pnl }) => t + pnl, 0) * -1 / (closedData || []).filter(({ pnl }) => pnl < 0).length\r\n    const expectancy = (winPercent * avgWin) - (lossPercent * avgLoss)\r\n    const risk = Object.values(closedData || []).reduce((t, { draw }) => t + draw, 0)\r\n    const pnl = Math.round((Object.values(closedData || []).reduce((t, { pnl }) => t + pnl, 0)))\r\n    const calmarRatio = (pnl / Math.max(...(closedData || []).map(({ draw }) => draw))).toFixed(2)\r\n    const ror = pnl / risk\r\n    return (\r\n      <tbody>\r\n        <tr>\r\n          <td className='align-middle'>Win Percentage</td>\r\n          <td className='align-middle'>{Math.round(winPercent * 100)}%</td>\r\n        </tr>\r\n        <tr>\r\n          <td className='align-middle'>Loss Percentage</td>\r\n          <td className='align-middle'>{Math.round(lossPercent * 100)}%</td>\r\n        </tr>\r\n        <tr>\r\n          <td className='align-middle'>Calmar Ratio</td>\r\n          <td className='align-middle'>{calmarRatio}</td>\r\n        </tr>\r\n        <tr>\r\n          <td className='align-middle'>Return on Risk</td>\r\n          <td className='align-middle'>{Math.round(ror * 100)}%</td>\r\n        </tr>\r\n        <tr>\r\n          <td className='align-middle'>Expectancy Per Trade</td>\r\n          <td className='align-middle'>{dollarUS.format(expectancy)}</td>\r\n        </tr>\r\n      </tbody>\r\n    )\r\n}\r\n\r\n\r\n  return (\r\n    <>\r\n<Navbar bg=\"dark\" sticky=\"top\">\r\n  <Container fluid>\r\n    <Navbar.Brand className=\"text-light p-0\" style={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <img src={process.env.PUBLIC_URL + \"/OptionsAnalyzerS.png\"} alt=\"logo - target with arrow\" className=\"mt-1 mb-2\" style={{ width: \"2.25em\" }} />\r\n      <Button className=\"b-color m-2 p-2 text-center mr-auto\" href=\"https://optionalpha.com/\">Data Sourced from Option Alpha</Button>\r\n      <Dropdown>\r\n        <Dropdown.Toggle variant=\"primary\" id=\"bot-select\" className=\"b-color m-2 p-2 text-center\">\r\n          {selectedStrat}\r\n        </Dropdown.Toggle>\r\n        <Dropdown.Menu>\r\n          {stratNames.map((strat) => (\r\n            <Dropdown.Item\r\n              key={strat}\r\n              onClick={() => setSelectedStrat(strat)}\r\n            >\r\n              {strat}\r\n            </Dropdown.Item>\r\n          ))}\r\n        </Dropdown.Menu>\r\n      </Dropdown>\r\n    </Navbar.Brand>\r\n  </Container>\r\n</Navbar>\r\n\r\n      <Container fluid>\r\n        <Row className=\"overflow-hidden\">\r\n\r\n          {buildChart()}\r\n\r\n          <Col sm={2}>\r\n            <Table size=\"sm\" className=\"text-light border border-secondary mt-3\">\r\n              <thead>\r\n                <tr>\r\n                  <th className=\"text-center\" colSpan='2'>METRICS</th>\r\n                </tr>\r\n              </thead>\r\n              {metrics()}\r\n            </Table>\r\n          </Col>\r\n\r\n          <Col>\r\n            <Row className=\"mx-auto mt-3\">\r\n              <ButtonGroup>\r\n                <Button variant=\"outline-secondary\" size=\"small\" className=\"mb-2\" onClick={toggleShowBot}>Bot Details</Button>\r\n                <Button variant=\"outline-secondary\" size=\"small\" className=\"mb-2\" onClick={toggleShowCurPos}>Current Positions</Button>\r\n                <Button variant=\"outline-secondary\" size=\"small\" className=\"mb-2\" onClick={toggleShowClosed}>Closed Positions</Button>\r\n              </ButtonGroup>\r\n            </Row>\r\n\r\n            <Row className=\"mx-auto mt-3 mb-2 p-1\">\r\n              {showBot ? (\r\n                <Table responsive size=\"sm\" className=\"sticky text-light border border-secondary\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th className=\"text-left header align-middle\">BOT</th>\r\n                      <th className=\"text-center align-middle\">POSITIONS</th>\r\n                      <th className=\"text-center align-middle\">ALLOCATION</th>\r\n                      <th className=\"text-center align-middle\">CAP AT RISK</th>\r\n                      <th className=\"text-center align-middle\">P/L</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {dataBotBody()}\r\n                  </tbody>\r\n                  <tfoot>\r\n                    {dataBotFoot()}\r\n                  </tfoot>\r\n                </Table>\r\n              ) : null}\r\n\r\n              {showCurPos ? (\r\n                <Table responsive size=\"sm\" className=\"sticky text-light border border-secondary\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th className=\"text-left align-middle\">CURRENT POSITIONS</th>\r\n                      <th className=\"text-center align-middle\">DAYS</th>\r\n                      <th className=\"text-center align-middle\">QTY</th>\r\n                      <th className=\"text-center align-middle\">CAP AT RISK</th>\r\n                      <th className=\"text-center align-middle\">P/L</th>\r\n                      <th className=\"text-center align-middle\">RETURN ON RISK</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {dataPosBody()}\r\n                  </tbody>\r\n                  <tfoot>\r\n                    {dataPosFoot()}\r\n                  </tfoot>\r\n                </Table>\r\n              ) : null}\r\n\r\n              {showClosed ? (\r\n                <Table responsive size=\"sm\" className=\"sticky text-light border border-secondary\">\r\n                  <thead>\r\n                    <tr>\r\n                      <th className=\"text-left align-middle\">CLOSED POSITIONS</th>\r\n                      <th className=\"text-center align-middle\">OPEN DATE</th>\r\n                      <th className=\"text-center align-middle\">CLOSED DATE</th>\r\n                      <th className=\"text-center align-middle\">CAP RISKED</th>\r\n                      <th className=\"text-center align-middle\">P/L</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {dataClosedBody()}\r\n                  </tbody>\r\n                  <tfoot>\r\n                    {dataClosedFoot()}\r\n                  </tfoot>\r\n                </Table>\r\n              ) : null}\r\n\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n"],"sourceRoot":""}